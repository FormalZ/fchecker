-- | Module used to calculate the complexity of an LExpr.
module LogicIR.Backend.QuickCheck.Iterations (iterations) where

import LogicIR.Expr
import LogicIR.Fold
import LogicIR.Normalizer

-- | Calculates the probability that, given a random model generated by
--   ModelGenerator, the LExpr evaluates to true.
iterations :: LExpr -> Int
iterations e = min 500 (foldLExpr algebra (skolemize e))

  where algebra :: LAlgebra Int
        algebra = LAlgebra fcns fvar funi fbin fiff fqnt farr fnll flen

        fcns _                     = 1
        funi _ e1                  = 2 * e1
        fbin e1 _ e2               = e1 * e2
        fiff ge e1 e2              = ge * e1 * e2
        fvar (Var (TPrim PInt) _)  = 3
        fvar (Var (TPrim PReal) _) = 3
        fvar (Var (TPrim PBool) _) = 2
        fvar _                     = 3
        fqnt _ _ e1 e2             = 3 * e1 * e2
        farr _ _                   = 3
        fnll _                     = 2
        flen _                     = 3
